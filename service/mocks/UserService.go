// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	model "github.com/erikrios/go-clean-arhictecture/model"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Create provides a mock function with given fields: request
func (_m *UserService) Create(request model.CreateUserRequest) (model.GetUserResponse, error) {
	ret := _m.Called(request)

	var r0 model.GetUserResponse
	if rf, ok := ret.Get(0).(func(model.CreateUserRequest) model.GetUserResponse); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(model.GetUserResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.CreateUserRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *UserService) List() ([]model.GetUserResponse, error) {
	ret := _m.Called()

	var r0 []model.GetUserResponse
	if rf, ok := ret.Get(0).(func() []model.GetUserResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.GetUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: request
func (_m *UserService) Login(request model.LoginUserRequest) (model.GetUserResponse, error) {
	ret := _m.Called(request)

	var r0 model.GetUserResponse
	if rf, ok := ret.Get(0).(func(model.LoginUserRequest) model.GetUserResponse); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(model.GetUserResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.LoginUserRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
